package com.javarush.task.task21.task2103;

/* 
Все гениальное - просто!
Упростить. Переменные не переименовывать, комментарии не оставлять.


Требования:
1. Метод calculate должен быть статическим.
2. Метод calculate должен возвращать значение типа boolean.
3. Метод calculate должен принимать четыре параметра типа boolean.
4. Метод calculate должен быть максимально упрощен(поведение должно остаться прежним).
*/
public class Solution {
    public static boolean calculate(boolean a, boolean b, boolean c, boolean d) {

        return c;
        //return c && ( (a && b && !d) || !a || !b || d );
        //return (a && b && c && !d) || (!a && c) || (!b && c) || (c && d);
    }

    public static void main(String[] args) {

    }
}
//1. Выносим за скобки c
//(a && b && c && !d) || (!a && c) || (!b && c) || (c && d) = c &&  ( (a && b  && !d) || !a || !b || d )
//2. Из тождества x || y = !(!x && !y) следует, что !a || !b || d = !(a && b  && !d)
//3. Исходя из пункта 2 исходное выражение имеет вид c &&  ( (a && b  && !d) || !(a && b  && !d) ),
//а т.к. x || !x = 1 то выражение принимает вид c &&  1 = с
//
//Так же можно было тупо написать таблицу из 16 всевозможных вариантов и заметить что результат
// совпадает с значением с, в этом случае можно без таблицы но в общем использую ДНФ и КНФ иногда
// можно существенно упростить выражение.

//Если d заменить на !x, то получится выражение:
//(a && b && x) || !a || !b || !x
//А по нему уже хорошо видно, что оно всегда true