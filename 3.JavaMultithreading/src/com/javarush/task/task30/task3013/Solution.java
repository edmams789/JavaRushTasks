package com.javarush.task.task30.task3013;

/* 
Набираем код
Необходимо реализовать публичный метод int resetLowerBits(int number), который обнуляет все биты в числе
number, кроме самого старшего равного единице, и возвращает это число.
Число типа int это 4 байта = 32 бита. Если в метод передано число 3456, его представление в виде битов
будет 00000000 00000000 00001101 10000000. В методе нужно обнулить все младшие биты, то есть на выходе
ожидается что число, представленное в виде битов, будет иметь вид: 00000000 00000000 00001000 00000000.
Это число 2048.

Еще несколько примеров:
Пример 1:
на входе: 1
на выходе: 1

Пример 2:
на входе: 4
на выходе: 4

Пример 3:
на входе: 255
на выходе: 128

Параметр метода resetLowerBits может быть от 1 до Integer.MAX_VALUE включительно.
Используй только операции:
1) =
2) |
3) &
4) >>
5) <<
6) ~
7) цифры от 0 до 9 включительно
8) круглые скобки
9) оператор "return" для возврата результата метода.

ЗАПРЕЩЕНО создавать переменные, использовать циклы, условные операторы и прочее.
Имя параметра метода resetLowerBits не изменяй (должно быть "number").
Метод main не принимает участия в тестировании.

Требования:
1. В классе Solution должен присутствовать публичный метод int resetLowerBits(int).
2. Параметр метода resetLowerBits(int) должен называться number.
3. В классе Solution в методе resetLowerBits(int) используй только разрешенные операции.
4. Метод resetLowerBits должен работать согласно условию задачи.
*/

public class Solution {
    public static void main(String[] args) {
        Solution solution = new Solution();
        int number = Integer.MAX_VALUE - 133;
        System.out.println(Integer.toString(number, 2));

        String result = Integer.toString(solution.resetLowerBits(number), 2);
        System.out.println(result);
    }

    public int resetLowerBits(int number) { //1111111111111111111111101111010
        //напишите тут ваш код
        //return number << number + 3;
        number |= number >> 1; //1111111111111111111111111111111
        number |= number >> 2; //1111111111111111111111111111111
        number |= number >> 3; //1111111111111111111111111111111
        number |= number >> 4; //1111111111111111111111111111111
        number &= ~number >> 1; //1000000000000000000000000000000
        return number;
    }
}
/*
Честно говоря по настоящему пытался вникнуть и придумать самому как это всё сделать, но просто не хватило
или ума или опыта. Подсмотрел тут решение, ничего не понял, вставил себе, перетестил как мог, понял как
это работает и осознал что в этом не было ничего крайне хитрого. Приложу своё решение потому что даже не
могу объяснить (как собака которая всё понимает).
number |= number >> 1;
number |= number >> 2;
number |= number >> 3;
number |= number >> 4;
number &= ~number >> 1;
return number;
ниже был вариант где было немного по другому, но я сделал так и вроде всё работает и валидатор принял.
Проверял на значениях Integer.MAX_VALUE - 1_000_000_000, 2049, 2050, 2051 (на них явно видно подводные
камни). Суть в том что мы делаем из любого числа число у которого до максимального разряда с "1" с права
становятся все "1", а потом в конце с помощью оператора "~" меняем все "1" на нули, сдвигаем это всё дело
вправо на один разряд, сравниваем с числом где все "1" и получаеться тт что нам нужно.
 */